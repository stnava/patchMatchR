% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/patchMatch.R
\name{deepLocalPatchMatch}
\alias{deepLocalPatchMatch}
\title{locally constrained deep feature patch matching}
\usage{
deepLocalPatchMatch(movingImage, fixedImage, movingImageMask,
  fixedImageMask, patchSize = 32, knn = 1, localSearchRadius = 5,
  nSamples, block_name = "block2_conv2", kPackage = "FNN",
  verbose = FALSE)
}
\arguments{
\item{movingImage}{input image from which we extract patches that are
transformed to the space of the fixed image}

\item{fixedImage}{input image that provides the fixed reference domain.}

\item{movingImageMask}{defines the object of interest in the movingImage}

\item{fixedImageMask}{defines the object of interest in the fixedImage}

\item{patchSize}{integer greater than or equal to 32.}

\item{knn}{k-nearest neighbors ( should be >= 1  )}

\item{localSearchRadius}{radius value passed to \code{makePointsImage}}

\item{nSamples}{number of local samples (optional), can speed things up at
the cost of some accuracy}

\item{block_name}{name of vgg feature block, either block2_conv2 or integer.
use the former for smaller patch sizes.}

\item{kPackage}{name of package to use for knn}

\item{verbose}{boolean}
}
\value{
correspondence data
}
\description{
High-level function for deep patch matching constrained to be local.
}
\examples{

library( keras )
library( ANTsR )
nP1 = 5
nP2 = 20
psz = 32
img <- ri( 1 ) \%>\% iMath( "Normalize" )
img2 <- ri( 2 ) \%>\% iMath( "Normalize" )
mask = randomMask( getMask( img ), nP1 )
mask2 = randomMask( getMask( img2 ), nP2 )
match = deepLocalPatchMatch( img2, img, mask, mask2 )

}
\author{
Avants BB
}
